// src/runtime/is-class.ts
function isClass(Class) {
  if (typeof Class !== "function") {
    return false;
  }
  if (/^class\s/.test(Function.prototype.toString.call(Class))) {
    return true;
  }
  try {
    new Class();
    return /^[A-Z]/gm.test(Class.name);
  } catch (err) {
    return !err.message.includes("is not a constructor");
  }
}

// src/types/kind.enum.ts
var Kind = /* @__PURE__ */ ((Kind2) => {
  Kind2["Null"] = "null";
  Kind2["String"] = "string";
  Kind2["Undefined"] = "undefined";
  Kind2["Array"] = "array";
  Kind2["ArrayLike"] = "arraylike";
  Kind2["Class"] = "class";
  Kind2["Function"] = "function";
  Kind2["Symbol"] = "symbol";
  Kind2["Number"] = "number";
  Kind2["Date"] = "date";
  Kind2["Boolean"] = "boolean";
  Kind2["RegExp"] = "regexp";
  Kind2["Buffer"] = "buffer";
  Kind2["NaN"] = "nan";
  Kind2["Set"] = "set";
  Kind2["Map"] = "map";
  Kind2["ArrayBuffer"] = "arraybuffer";
  Kind2["Error"] = "error";
  Kind2["Promise"] = "promise";
  Kind2["WeakMap"] = "weakmap";
  Kind2["WeakSet"] = "weakset";
  Kind2["Int8Array"] = "int8array";
  Kind2["Uint8Array"] = "uint8array";
  Kind2["Uint8ClampedArray"] = "uint8clampedarray";
  Kind2["Object"] = "object";
  Kind2["Element"] = "element";
  return Kind2;
})(Kind || {});
var kind_enum_default = Kind;

// src/runtime/kind-of.ts
function kindOf(value) {
  if (value === null) return kind_enum_default.Null;
  if (value === void 0) return kind_enum_default.Undefined;
  if (typeof value === "string") return kind_enum_default.String;
  if (typeof Buffer !== "undefined" && Buffer.isBuffer(value)) {
    return kind_enum_default.Buffer;
  }
  if (value instanceof ArrayBuffer) return kind_enum_default.ArrayBuffer;
  if (typeof value === "number" && Number.isNaN(value)) {
    return kind_enum_default.NaN;
  }
  if (value instanceof Error) return kind_enum_default.Error;
  if (value instanceof Promise) return kind_enum_default.Promise;
  if (value instanceof WeakMap) return kind_enum_default.WeakMap;
  if (value instanceof WeakSet) return kind_enum_default.WeakSet;
  if (value instanceof Int8Array) return kind_enum_default.Int8Array;
  if (value instanceof Uint8Array) return kind_enum_default.Uint8Array;
  if (value instanceof Uint8ClampedArray) return kind_enum_default.Uint8ClampedArray;
  if (typeof value === "function") {
    return isClass(value) ? kind_enum_default.Class : kind_enum_default.Function;
  }
  if (Array.isArray(value)) return kind_enum_default.Array;
  if (value instanceof Set) return kind_enum_default.Set;
  if (value instanceof Map) return kind_enum_default.Map;
  if (typeof value === "object" && value !== null && "length" in value && typeof value.length === "number" && !(value instanceof String)) {
    return kind_enum_default.ArrayLike;
  }
  if (typeof value === "symbol") return kind_enum_default.Symbol;
  if (typeof value === "number") return kind_enum_default.Number;
  if (typeof value === "boolean") return kind_enum_default.Boolean;
  if (value instanceof Date) return kind_enum_default.Date;
  if (value instanceof RegExp) return kind_enum_default.RegExp;
  if (typeof Element === "function" && value instanceof Element)
    return kind_enum_default.Element;
  if (typeof value === "object") return kind_enum_default.Object;
  return typeof value;
}
var kind_of_default = kindOf;

export { kind_of_default as default, kindOf };
//# sourceMappingURL=kind-of.js.map
//# sourceMappingURL=kind-of.js.map