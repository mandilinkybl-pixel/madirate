type EventMap = Record<string, any[]>;
declare class EventEmitter<Events extends EventMap> {
    private listeners;
    on<K extends keyof Events>(event: K, listener: (...args: Events[K]) => void): this;
    once<K extends keyof Events>(event: K, listener: (...args: Events[K]) => void): this;
    off<K extends keyof Events>(event: K, listener: (...args: Events[K]) => void): this;
    emit<K extends keyof Events>(event: K, ...args: Events[K]): boolean;
    removeAllListeners<K extends keyof Events>(event?: K): this;
}

export { EventEmitter, EventEmitter as default };
