// src/runtime/event-emitter.ts
var EventEmitter = class {
  listeners = {};
  on(event, listener) {
    (this.listeners[event] ??= []).push(listener);
    return this;
  }
  once(event, listener) {
    const onceWrapper = (...args) => {
      this.off(event, onceWrapper);
      listener(...args);
    };
    return this.on(event, onceWrapper);
  }
  off(event, listener) {
    this.listeners[event] = (this.listeners[event] ?? []).filter(
      (l) => l !== listener
    );
    return this;
  }
  emit(event, ...args) {
    const ls = this.listeners[event];
    if (!ls || ls.length === 0) return false;
    ls.forEach((listener) => listener(...args));
    return true;
  }
  removeAllListeners(event) {
    if (event) {
      delete this.listeners[event];
    } else {
      this.listeners = {};
    }
    return this;
  }
};
var event_emitter_default = EventEmitter;

export { EventEmitter, event_emitter_default as default };
//# sourceMappingURL=event-emitter.js.map
//# sourceMappingURL=event-emitter.js.map